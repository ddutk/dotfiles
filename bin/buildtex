#!/bin/bash

LATEX_PROG=xelatex
LATEX_DRIVER='-output-driver=xdvipdfmx -q -E'
LATEX_PARMS='-shell-escape -interaction=batchmode'

if [ -z "$#" ]; then
  echo "Usage: buildtex <file>"
  exit 1
fi

echo "$@" | grep ".tex" > /dev/null
if [ $? -ne 0 ]; then
  echo "! LaTeX Error: Filename must end in '.tex'."
  exit 1
fi


## Echo this to make AuCTeX happy
echo "This is XeTeX, Version 3.1415926-2.2-0.9995.2 (TeX Live 2009)"
echo "(./$@"
echo "LaTeX2e <2009/09/24>"
echo ""


## Get file name and construct output directory
FILE="$@"
FILEBASE="`basename "${FILE}" .tex`"
FILEDIR="`dirname "${FILE}"`"
OUTDIR="${FILEDIR}/.${FILE}/"
mkdir -p "$OUTDIR"

DO_OUTDIR="-output-directory=${OUTDIR}"


## Run LaTeX on the output file once
echo -n "First LaTeX execution...    "
${LATEX_PROG} "${LATEX_DRIVER}" ${LATEX_PARMS} "${DO_OUTDIR}" "${FILEBASE}" 2>&1 >/dev/null
if [ "$?" -ne 0 ]; then
  echo "[FAILED]"
  echo "! LaTeX Error: Failed while executing LaTeX for the first time"
  exit 1
fi
echo "[OK]"

## Run bibtex if needed
if grep bibdata "${OUTDIR}/${FILEBASE}.aux" > /dev/null; then
  echo -n "BibTeX execution...    "
  bibtex "${OUTDIR}/${FILEBASE}" 2>&1 >/dev/null
  if [ "$?" -ne 0 ]; then
    echo "[FAILED]"
    echo "! LaTeX Error: Failed while executing bibtex"
    exit 1
  fi
  echo "[OK]"
  
  echo -n "LaTeX after BibTeX (1/2)...    "
  ${LATEX_PROG} "${LATEX_DRIVER}" ${LATEX_PARMS} "${DO_OUTDIR}" "${FILEBASE}" 2>&1 >/dev/null
  if [ "$?" -ne 0 ]; then
    echo "[FAILED]"
    echo "! LaTeX Error: Failed while executing LaTeX for the first time after bibtex"
    exit 1
  fi
  echo "[OK]"
  
  echo -n "LaTeX after BibTeX (2/2)...    "
  ${LATEX_PROG} "${LATEX_DRIVER}" ${LATEX_PARMS} "${DO_OUTDIR}" "${FILEBASE}" 2>&1 >/dev/null
  if [ "$?" -ne 0 ]; then
    echo "[FAILED]"
    echo "! LaTeX Error: Failed while executing LaTeX for the second time after bibtex"
    exit 1
  fi
  echo "[OK]"
fi


## Run LaTeX one more time
echo -n "Final LaTeX execution...    "
${LATEX_PROG} "${LATEX_DRIVER}" ${LATEX_PARMS} "${DO_OUTDIR}" "${FILEBASE}" 2>&1 >/dev/null
if [ "$?" -ne 0 ]; then
  echo "[FAILED]"
  echo "! LaTeX Error: Failed while executing LaTeX for the last time"
  exit 1
fi
echo "[OK]"


## Copy the PDF to the file directory
echo -n "Copying completed PDF...    "
cp "${OUTDIR}/${FILEBASE}.pdf" "${FILEDIR}"
echo "[OK]"


## Echo this to make AuCTeX happy
filesize=`stat -f %z "${FILEDIR}/${FILEBASE}.pdf"`

# This is the only way I can find to easily get the number of pages from a PDF
# file using only GhostScript.  The standard "pdfinfo" seems to hang occasionally,
# while pdf2dsc just errors out instantly.
pdf2dsc "${FILEDIR}/${FILEBASE}.pdf" "${FILEDIR}/${FILEBASE}.dsc"
if [ -f "${FILEDIR}/${FILEBASE}.dsc" ] ; then
  pages=`grep "%%Pages:" "${FILEDIR}/${FILEBASE}.dsc" | sed "s/%%Pages: //"`
  rm -f "${FILEDIR}/${FILEBASE}.dsc"
else
  pages="1"
fi

if [ "$pages" -eq 1 ] ; then
  pageword="page"
else
  pageword="pages"
fi

echo "Output written on ${FILEBASE}.pdf (${pages} ${pageword}, ${filesize} bytes)."
exit 0
